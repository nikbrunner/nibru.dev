// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
/// @author Harry Roberts
/// @param {Bool} $self [false] - Whether or not to include current selector
/// @link https://twitter.com/csswizardry/status/478938530342006784 Original tweet from Harry Roberts
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @author Hugo Giraudel
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

@mixin grid($cols: 1fr, $col-gap: 0, $rows: auto, $row-gap: 0) {
  display: grid;
  grid-template-columns: $cols;
  grid-column-gap: $col-gap;
  grid-template-rows: $rows;
  grid-row-gap: $row-gap;
}

@mixin grid-position(
  $col-start,
  $col-end,
  $row-start: auto,
  $row-end: auto
) {
  grid-column-start: $col-start;
  grid-column-end: $col-end;
  grid-row-start: $row-start;
  grid-row-end: $row-end;
}

@mixin flex(
  $flex-flow: row nowrap,
  $justify-content: flex-start,
  $align-items: stretch,
  $align-content: normal,
  $inline: false
) {
  @if $inline {
    display: inline-flex;
  } @else {
    display: flex;
  }

  flex-flow: $flex-flow;
  justify-content: $justify-content;
  align-content: $align-content;
  align-items: $align-items;
}

/*
* Definition of all breakpoints
* Mixin for using media-queries
*/
/// Breakpoints map
/// @prop {String} keys - Keys are identifiers mapped to a given length
/// @prop {Map} values - Values are actual breakpoints expressed in pixels
$breakpoints: (
  'xs': 320px,
  's': 414px,
  'm': 768px,
  'l': 1024px,
  'xl': 1280px,
  'xxl': 1440px,
  'xxxl': 1920px,
);
@mixin mq($width, $type: min) {
  @if map_has_key($breakpoints, $width) {
    $width: map_get($breakpoints, $width);

    @if $type == max {
      $width: $width - 1px;
    }

    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
}

/*
* Mixin for browser specific scss
* Source & Usage: http://aslanbakan.com/en/blog/browser-and-device-specific-css-styles-with-sass-and-less-mixins/
* JS: document.documentElement.setAttribute("data-browser", navigator.userAgent);
*/
@mixin browser($browsers: Mozilla) {
  @each $browser in $browsers {
    html[data-browser*='#{$browser}'] & {
      @content;
    }
  }
}
